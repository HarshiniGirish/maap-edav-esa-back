"""
Django settings for loader project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import errno

from osgeo.gdal import Debug
if "http://localhost" in os.getenv("REFERENCE_HOST",""):
    from dotenv import load_dotenv
    load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

WCS_BASE_PATH = os.environ[ 'REFERENCE_HOST' ].strip( '/' ) + '/wcs?'
WCS_DIR       = os.path.join( os.environ[ 'STORAGE_DIR' ], 'mwcs' )
TMP_STORAGE_DIR = os.path.join( os.environ[ 'STORAGE_DIR' ], 'tmp' )
for store_dir in [ TMP_STORAGE_DIR, WCS_DIR ]:
    try:
        os.makedirs( store_dir )
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise
LOADER_ENDPOINT = os.environ[ 'REFERENCE_HOST' ].strip( '/' ) +  '/loader/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '###############################################'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '*'
]

#database catalogue connection
catalogue_db = "dbname='%s' user='%s' host='%s' password='%s'" % ( os.environ[ 'POSTGRES_DB' ], os.environ[ 'POSTGRES_USER' ], os.environ[ 'POSTGRES_HOST' ], os.environ[ 'POSTGRES_PASSWORD' ] )


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'loader.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'loader.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

TH_NUMBER = 1

INGESTION_LOG = os.getenv( "INGESTION_LOG", "" )
FAIL_INGESTION_LOG = os.getenv( "FAIL_INGESTION_LOG", "" )
for dir in [INGESTION_LOG,FAIL_INGESTION_LOG]:
    if not os.path.isdir( os.path.dirname( dir ) ):
        os.makedirs( os.path.dirname( dir ) )

DEFAULT_LOGGING={
        'version':1,
        'disable_exixting_loggers':False,
        'formatters':{
            'verbose':{
                'format': '[%(asctime)s][%(levelname)s][%(name)s:L%(lineno)s] - %(message)s'
                },
            'stdout':{
                'format': '[%(levelname)s][%(name)s:L%(lineno)s] - %(message)s'
                }
            },
        'handlers':{
            'logfile':{
                'level':'DEBUG',
                'formatter': 'verbose',
                'class': 'logging.handlers.WatchedFileHandler',
                'filename': INGESTION_LOG
                },
            'fail_log_file':{
                'level':'DEBUG',
                'formatter': 'verbose',
                'class': 'logging.handlers.WatchedFileHandler',
                'filename': FAIL_INGESTION_LOG
                },
            'console':{
                'level': 'DEBUG',
                'formatter': 'stdout',
                'class': 'logging.StreamHandler',
                'stream': 'ext://sys.stdout',
                },
            'console_warnings':{
                'level': 'WARNING',
                'formatter': 'stdout',
                'class': 'logging.StreamHandler',
                'stream': 'ext://sys.stdout'
                },
            },
           'loggers':{
               'debug': {
                   'handlers': [ 'logfile', 'console'],
                   'propagate': True,
                   'level': 'DEBUG',
                   },
               'default': {
                   'handlers': [ 'logfile', 'console_warnings' ],
                   'propagate': True,
                   'level': 'DEBUG',
                   },
                "fail":{
                    'handlers':["fail_log_file", 'console_warnings'],
                    "propagate":True,
                    "level":"DEBUG"
                }
               }
           }
DATASETS_SPEC=os.getenv("DATASETS_SPEC","")
ENV_VARS={
        "AWS_SECRET_ACCESS_KEY":os.getenv("AWS_SECRET_ACCESS_KEY",""),
        "AWS_ACCESS_KEY_ID":os.getenv("AWS_ACCESS_KEY_ID",""),
        "AWS_S3_ENDPOINT":os.getenv("AWS_S3_ENDPOINT",""),
        "AWS_REGION":os.getenv("AWS_REGION",""),
        "GDAL_DISABLE_READDIR_ON_OPEN":os.getenv("GDAL_DISABLE_READDIR_ON_OPEN","EMPTY_DIR"),
        "GDAL_PAM_ENABLED":os.getenv("GDAL_PAM_ENABLED","NO")
        }
def init_environ( ):
    for key in ENV_VARS:
        AWS_SETTING_VALUE = ENV_VARS[ key ]
        if type( AWS_SETTING_VALUE ) == str and AWS_SETTING_VALUE.startswith("http"):
            AWS_SETTING_VALUE=AWS_SETTING_VALUE.split("/")[2]
        if AWS_SETTING_VALUE  is not None:
            os.environ[ key ] = str( AWS_SETTING_VALUE )

